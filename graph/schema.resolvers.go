package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	generated "graphql-demo/graph/generated"
	"graphql-demo/graph/model"

	"github.com/google/uuid"
)

func mapUserDBToGraphQL(u *model.UserDB, posts []*model.PostDB) *model.User {
	gqlPosts := make([]*model.Post, len(posts))
	for i, p := range posts {
		gqlPosts[i] = &model.Post{
			ID:      p.ID,
			Title:   p.Title,
			Content: p.Content,
			User:    nil, // optional, can fill later
		}
	}
	return &model.User{
		ID:    u.ID,
		Name:  u.Name,
		Email: u.Email,
		Posts: gqlPosts,
	}
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &model.User{
		ID:    uuid.NewString(), // You can use UUID or auto-increment
		Name:  input.Name,
		Email: input.Email,
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name string, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	// 1. Save post in DB
	post := &model.Post{
		ID:      uuid.NewString(),
		Title:   input.Title,
		Content: input.Content,
		UserID:  input.UserID,
	}
	if err := r.DB.Create(post).Error; err != nil {
		return nil, err
	}

	// 2. Notify all subscribers
	r.PostObserversM.Lock()
	for _, ch := range r.PostObservers {
		select {
		case ch <- post:
		default:
			// Skip if subscriber channel is blocked
		}
	}
	r.PostObserversM.Unlock()

	return post, nil
}

func (r *subscriptionResolver) PostCreated(ctx context.Context) (<-chan *model.Post, error) {
	id := uuid.NewString()
	ch := make(chan *model.Post, 1)

	r.PostObserversM.Lock()
	if r.PostObservers == nil {
		r.PostObservers = make(map[string]chan *model.Post)
	}
	r.PostObservers[id] = ch
	r.PostObserversM.Unlock()

	// Remove subscriber when context is done
	go func() {
		<-ctx.Done()
		r.PostObserversM.Lock()
		delete(r.PostObservers, id)
		r.PostObserversM.Unlock()
		close(ch)
	}()

	return ch, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title *string, content *string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	if err := r.DB.Preload("Posts").Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	var userDB model.UserDB
	// Preload posts so we get them in one query
	if err := r.DB.Preload("Posts").First(&userDB, "id = ?", id).Error; err != nil {
		return nil, err
	}

	// Map DB model to GraphQL model
	postsPtr := make([]*model.PostDB, len(userDB.Posts))
	for i := range userDB.Posts {
		postsPtr[i] = &userDB.Posts[i]
	}
	user := mapUserDBToGraphQL(&userDB, postsPtr)
	return user, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post
	if err := r.DB.Preload("User").Find(&posts).Error; err != nil {
		return nil, err
	}
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// NewPost is the resolver for the newPost field.
func (r *subscriptionResolver) NewPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: NewPost - newPost"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
